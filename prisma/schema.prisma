// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Role {
    roleId String   @id @default(cuid())
    role   UserRole
    Users  User[]
}

enum UserRole {
    employee
    manager
    projectManager
    ceo
    accountant
    admin
}

model User {
    id                String              @id @default(cuid())
    username          String?             @unique
    email             String?             @unique
    password          String
    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @updatedAt
    role              Role                @relation(fields: [roleId], references: [roleId])
    roleId            String
    PurchaseOrderLogs PurchaseOrderLogs[]

    userPrepare   PurchaseOrder[] @relation(name: "userPrepare")
    userReview    PurchaseOrder[] @relation(name: "userReview")
    userApprove   PurchaseOrder[] @relation(name: "userApprove")
    Notifications Notification[]
}

model PurchaseOrderLogs {
    purchaseOrderLogsId String @id @default(cuid())

    purchaseOrderId String
    purchaseOrder   PurchaseOrder        @relation(fields: [purchaseOrderId], references: [purchaseOrderId])
    action          PurchaseOrderActions
    user            User                 @relation(fields: [userId], references: [id])
    comment         String               @default("")
    log             String               @default("")
    userId          String
    createdAt       DateTime             @default(now())
}

enum PurchaseOrderActions {
    create
    review
    reject
    update
    complete
    paid
}

enum Status {
    draft
    toReview
    toApprove
    rejected
    approved
    paymnetInProgress
    completed
}

model PurchaseOrder {
    purchaseOrderId   String              @id @default(cuid())
    status            Status              @default(draft)
    paid              Boolean             @default(false)
    userPrepareId     String
    userPrepare       User                @relation(fields: [userPrepareId], references: [id], name: "userPrepare")
    userReviewId      String
    userReview        User                @relation(fields: [userReviewId], references: [id], name: "userReview")
    userApproveId     String
    userApprove       User                @relation(fields: [userApproveId], references: [id], name: "userApprove")
    PurchaseOrderLogs PurchaseOrderLogs[]

    PurchaseOrderDetails PurchaseOrderDetails?

    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    Notifications Notification[]
}

model PurchaseOrderDetails {
    purchaseOrderDetailId     String                     @id @default(cuid())
    description               String?
    createdAt                 DateTime                   @default(now())
    installment               Boolean                    @default(false)
    projectId                 String
    project                   Project                    @relation(fields: [projectId], references: [projectId])
    companyId                 String
    company                   Company                    @relation(fields: [companyId], references: [companyId])
    paymentMethod             PaymentMethod
    nameOnCheque              String?
    iban                      String?
    cliq                      String?
    date                      DateTime?
    contactName               String?
    contactNumber             String?
    currency                  Currency                   @default(JOD)
    totalAmount               Float
    PurchaseOrderItems        PurchaseOrderItem[]
    PurchaseOrderInstallments PurchaseOrderInstallment[]
    purchaseOrderId           String                     @unique
    PurchaseOrder             PurchaseOrder              @relation(fields: [purchaseOrderId], references: [purchaseOrderId])
    updatedAt                 DateTime                   @updatedAt
}

enum Currency {
    JOD
    USD
    EUR
    GBP
    AED
}

enum PaymentMethod {
    bankTransfer
    cheque
    cash
    CLIQ
}

model Project {
    projectId            String                 @id @default(cuid())
    projectName          String                 @unique
    closed               Boolean                @default(false)
    PurchaseOrderDetails PurchaseOrderDetails[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Company {
    companyId            String                 @id @default(cuid())
    companyName          String                 @unique
    PurchaseOrderDetails PurchaseOrderDetails[]
    createdAt            DateTime               @default(now())
    updatedAt            DateTime               @updatedAt
}

model PurchaseOrderItem {
    purchaseOrderItemId   String               @id @default(cuid())
    description           String?
    priceNoTax            Float
    priceTax              Float
    taxAmount             Float
    // date                  DateTime
    purchaseOrderDetailId String
    purchaseOrderDetail   PurchaseOrderDetails @relation(fields: [purchaseOrderDetailId], references: [purchaseOrderDetailId])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PurchaseOrderInstallment {
    PurchaseOrderInstallmentId String                @id @default(cuid())
    description                String
    amount                     Float
    percentage                 Float
    date                       DateTime
    paid                       Boolean               @default(false)
    PurchaseOrderDetail        PurchaseOrderDetails? @relation(fields: [purchaseOrderDetailId], references: [purchaseOrderDetailId])
    purchaseOrderDetailId      String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Notification {
    notificationId String  @id @default(cuid())
    text           String
    seen           Boolean @default(false)
    opened         Boolean @default(false)

    userId String
    user   User   @relation(fields: [userId], references: [id])

    purchaseOrderId String
    purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [purchaseOrderId])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
